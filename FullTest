



class Distributor
{
    private $name;

    public function getName()
    {
        return $this->name;
    }
    public function setName($name)
    {
        $this->name = $name;
    }

    public function downloadSales($file, DistributorSalesHandler $distributorSalesHandler){
        $distributorSalesHandler -> getDistributor($this->getName());
        $distributorSalesHandler -> createSalesReceive($file);
    }
}

$d1 = new Distributor;
$d1 ->setName('д1');
echo $d1 ->getName();

$d2 = new Distributor;
$d2 ->setName('д2');
echo $d2 ->getName();


class ListDistributor
{
    private $distributors = Array();

    //добавление нового дистрибьютора, с проверкой наличия у добавляемой названия,
    // и последующей проверкой наличия дистрибьютора в списке
    public function addDistributor (Distributor $distributor){
        try {
            if ($key = $distributor -> getName()){
                $check = $this -> checkDistributorInList($distributor-> getName());

                if(!$check) {
                    $key = $distributor->getName();
                    $value = $distributor;

                    $this -> distributors += [$key => $value];
                }
                else
                { echo 'Данный дистрибьютор уже в списке';}

            }
            else {
                throw new Exception('Для добавления дистрибьютора в список необходимо указать название дистрибьютора');
            }
        }
        catch (Exception $ex){
            echo $ex ->getMessage();
        }
    }


    //проверка наличия дистрибьютора в списке дистрибьюторов
    public function checkDistributorInList ($distributor){
        echo array_key_exists($distributor, $this->distributors);
        return array_key_exists($distributor, $this->distributors);
    }


    //Отображение всего списка аптек (по обозначениям)
    public function showDistributors(){
        print_r(array_keys($this->distributors));
    }


    //выбор дистрибьютора из списка на основе ее обозначения
    public function findDistributor ($distributor){
        return $this -> distributors [$distributor];
    }
}

$ld= new ListDistributor;

$ld ->addDistributor($d1);
$ld ->addDistributor($d2);



class Item
{
    private $item;

    public function getItem()
    {
        return $this->item;
    }

    public function setItem($item)
    {
        $this->item = $item;
    }
}
$i1 = new Item;
$i1 -> setItem('11');
echo $i1->getItem();

$i2 = new Item;
$i2 -> setItem('22');
echo $i2->getItem();

$i3 = new Item;
$i3 -> setItem('33');
echo $i2->getItem();


class DistributorItemDesignation extends Item
{
    private $distributorItemDesignation;

    public function getDistributorItemDesignation()
    {
        return $this->distributorItemDesignation;
    }

    public function setDistributorItemDesignation($distributorItemDesignation)
    {
        $this->distributorItemDesignation = $distributorItemDesignation;
    }

}
$did1 = new DistributorItemDesignation;
$did1 -> setDistributorItemDesignation('одиннадцать');
echo $did1->getDistributorItemDesignation();

$did2 = new DistributorItemDesignation;
$did2 -> setDistributorItemDesignation('двадцать два');
echo $did2->getDistributorItemDesignation();

$did3 = new DistributorItemDesignation;
$did3 -> setDistributorItemDesignation('тридцать три');
echo $did1->getDistributorItemDesignation();

class ListItemDesignation
{
    private $relations = Array();

    //добавление новой привязки обозначения дистр-ра к товару Renewal
    public function addRelation (DistributorItemDesignation $distributorItemDesignation, Item $item){
        $key = $distributorItemDesignation -> getDistributorItemDesignation();
        $value = $item;

        $this->relations += [$key => $value];
    }

    //проверка наличия обозначения дистрибьютора среди привязок к товару Renewal
    public function validationDesignation (DistributorItemDesignation $distributorItemDesignation){
        $itemDesignation = $distributorItemDesignation -> getDistributorItemDesignation();
        return isset($this->relations[$itemDesignation]);
    }

    //получение названия товара Renewal на основе обозначчения дистрибьютора
    public function redefineDesignation (DistributorItemDesignation $distributorItemDesignation){
        try {
            if ($this->relations [$distributorItemDesignation -> getDistributorItemDesignation()])
            {return $this->relations [$distributorItemDesignation-> getDistributorItemDesignation()];}
            else
            {throw new Exception('Обозначение товара дистрибьютора не определено');}
        }
        catch (Exception $ex){
            echo $ex ->getMessage();
        }
    }
}

$li= new ListItemDesignation;
$li ->addRelation($did1, $i1);
$li ->addRelation($did2, $i2);
$li ->addRelation($did3, $i3);

echo $li->validationDesignation($did2);
echo ($li->redefineDesignation($did2))->getItem();



class PharmacyDesignation
{
    private $pharmacyDesignation;

    public function getPharmacyDesignation()
    {
        return $this->pharmacyDesignation;
    }

    public function setPharmacyDesignation($pharmacyDesignation)
    {
        $this->pharmacyDesignation = $pharmacyDesignation;
    }
}
$p1 = new PharmacyDesignation;
$p1 -> setPharmacyDesignation('Новосибирск, Красный проспект 1');
echo $p1->getPharmacyDesignation();

$p2 = new PharmacyDesignation;
$p2 -> setPharmacyDesignation('Новосибирск, Ленина 1');
echo $p2->getPharmacyDesignation();



class DistributorPharmacyDesignation extends PharmacyDesignation
{
    private $distributorPharmacyDesignation;

    public function getDistributorPharmacyDesignation()
    {
        return $this->distributorPharmacyDesignation;
    }

    public function setDistributorPharmacyDesignation($distributorPharmacyDesignation)
    {
        $this->distributorPharmacyDesignation = $distributorPharmacyDesignation;
    }
}
$dpd1 = new DistributorPharmacyDesignation;
$dpd1 -> setDistributorPharmacyDesignation('Нск, Красный пр-кт 1');
echo $dpd1->getDistributorPharmacyDesignation();

$dpd2 = new DistributorPharmacyDesignation;
$dpd2 -> setDistributorPharmacyDesignation('Новосибирск,Ленина 5');
echo $dpd2->getDistributorPharmacyDesignation();



class ListPharmacyDesignation
{
    private $relations = Array();

    //добавление новой привязки обозначения дистр-ра к аптеке Renewal
    public function addRelation (DistributorPharmacyDesignation $distributorPharmacyDesignation, PharmacyDesignation $pharmacyDesignation){
        $key = $distributorPharmacyDesignation -> getDistributorPharmacyDesignation();
        $value = $pharmacyDesignation;

        $this->relations += [$key => $value];
    }

    //проверка наличия обозначения дистрибьютора среди привязок к аптеке Renewal
    public function validationDesignation (DistributorPharmacyDesignation $distributorPharmacyDesignation){
        $pharmacyDesignation = $distributorPharmacyDesignation -> getDistributorPharmacyDesignation();
        return isset($this->relations[$pharmacyDesignation]);
    }

    //получение названия товара Renewal на основе обозначения дистрибьютора
    public function redefineDesignation (DistributorPharmacyDesignation $distributorPharmacyDesignation){
        try {
            if ($this->relations [$distributorPharmacyDesignation -> getDistributorPharmacyDesignation()])
            {return $this->relations [$distributorPharmacyDesignation-> getDistributorPharmacyDesignation()];}
            else
            {throw new Exception('Обозначение аптеки дистрибьютора не определено');}
        }
        catch (Exception $ex){
            echo $ex ->getMessage();
        }
    }
}

$lp= new ListPharmacyDesignation;
$lp ->addRelation($dpd1, $p1);
$lp ->addRelation($dpd2, $p2);



class Count
{
    private $count;

    public function getCount()
    {
        return $this->count;
    }

    public function setCount($count)
    {
        if ($count>0) {$this->count = $count;}
        else {echo 'Операция не выполнена.Значение должно быть больше нуля';}
    }
}

$c1 = new Count;
$c1 -> setCount('7');
echo $c1->getCount();

$c2 = new Count;
$c2 -> setCount('15');
echo $c2->getCount();

$c3 = new Count;
$c3 -> setCount('2');


$c4 = new Count;
$c4 -> setCount('1');

$c5 = new Count;
$c5 -> setCount('40');



class Sale
{
    private $distributor;
    private $itemDesignation;
    private $pharmacyDesignation;
    private $count;

    public function getDistributor()
    {
        return $this -> distributor;
    }

    public function setDistributor (Distributor $distributor)
    {
        $this-> distributor = $distributor;
    }

    public function getItemDesignation()
    {
        return $this -> itemDesignation;
    }

    public function setItemDesignation (Item $itemDesignation)
    {
        $this-> itemDesignation = $itemDesignation;
    }

    public function getPharmacyDesignation()
    {
        return $this->pharmacyDesignation;
    }

    public function setPharmacyDesignation(PharmacyDesignation $pharmacyDesignation)
    {
        $this->pharmacyDesignation = $pharmacyDesignation;
    }

    public function getCount()
    {
        return $this -> count;
    }

    public function setCount(Count $count)
    {
        $this->count = $count;
    }
}


// Загруженные пользователем значение продаж для последующей обработки
class SaleReceived extends Sale
{
    //проверка наличия названия товара дистрибьютора в списках
    public function validationItem(ListItemDesignation $listItemDesignation){
        return $listItemDesignation->validationDesignation($this->getItemDesignation());
    }

    //проверка наличия названия аптеки дистрибьютора в списках Renewal
    public function validationPharmacy(ListPharmacyDesignation $listPharmacyDesignation){
        return $listPharmacyDesignation->validationDesignation($this->getPharmacyDesignation());
    }

    //замена названия товара дистрибьютора на название Renewal
    public function redefineItemDesignation(ListItemDesignation $listItemDesignation){
        $itemDesignation = $listItemDesignation->redefineDesignation($this->getItemDesignation());
        $this->setItemDesignation( $itemDesignation);
    }

    //замена названия аптеки дистрибьютора на название Renewal
    public function redefinePharmacyDesignation(ListPharmacyDesignation $listPharmacyDesignation){
        $pharmacyDesignation = $listPharmacyDesignation->redefineDesignation($this->getPharmacyDesignation());
        $this->setPharmacyDesignation($pharmacyDesignation);
    }

    //проверка наличия всех привязок (товар и аптека)дистрибьютора к обозначениям Renewal
    public function checkCorrected(ListItemDesignation $listItemDesignation,
                                   ListPharmacyDesignation $listPharmacyDesignation){
        if (($this->validationItem($listItemDesignation)) &&
            ($this->validationPharmacy($listPharmacyDesignation))) {
            return true;
        } else {
            return false;
        }
    }

    //cоздание продажи с корректным нименованием товара и аптеки
    public function createSaleCorrected (ListItemDesignation $listItemDesignation,
                                         ListPharmacyDesignation $listPharmacyDesignation){
        if ($this->checkCorrected($listItemDesignation, $listPharmacyDesignation)) {

            $this->redefineItemDesignation($listItemDesignation);
            $this->redefinePharmacyDesignation($listPharmacyDesignation);


            $distributor = $this->getDistributor();
            $item = $this->getItemDesignation();
            $pharmacyDesignation = $this->getPharmacyDesignation();
            $count = $this->getCount();

            $saleCorrected = Array ($distributor, $item, $pharmacyDesignation, $count);

            return $saleCorrected;

        }
        else {
            echo 'Не все привязки присутствуют в системе';

//            if ($this->validationItem($listItemDesignation)){
//                $this->redefineItemDesignation($listItemDesignation);
//            }
//
//
//            if ($this->validationPharmacy($listPharmacyDesignation)){
//                $this->redefinePharmacyDesignation($listPharmacyDesignation);
//            }
//
//            $distributor = $this->getDistributor();
//            $item = $this->getItemDesignation();
//            $pharmacyDesignation = $this->getPharmacyDesignation();
//            $count = $this->getCount();
//
//            $saleNotCorrected = Array ($distributor, $item, $pharmacyDesignation, $count);
//
//            return $saleNotCorrected;
        }

    }
}


$sale1 = new SaleReceived();
$sale1 ->setDistributor($d1) ;
$sale1 ->setItemDesignation($did1) ;
$sale1 ->setPharmacyDesignation($dpd1) ;
$sale1 ->setCount($c1) ;

$sale2 = new SaleReceived();
$sale2 ->setDistributor($d1) ;
$sale2 ->setItemDesignation($did2) ;
$sale2 ->setPharmacyDesignation($dpd1) ;
$sale2 ->setCount($c2) ;

$sale3 = new SaleReceived();
$sale3 ->setDistributor($d1) ;
$sale3 ->setItemDesignation($did3) ;
$sale3 ->setPharmacyDesignation($dpd2) ;
$sale3 ->setCount($c3) ;

$sale4 = new SaleReceived();
$sale4 ->setDistributor($d2) ;
$sale4 ->setItemDesignation($did1) ;
$sale4 ->setPharmacyDesignation($dpd1) ;
$sale4 ->setCount($c4) ;

$sale5 = new SaleReceived();
$sale5 ->setDistributor($d2) ;
$sale5 ->setItemDesignation($did1) ;
$sale5 ->setPharmacyDesignation($dpd2) ;
$sale5 ->setCount($c5) ;



class SaleCorrected extends SaleReceived
{
    public function __construct(Array $array){
        $this -> setDistributor($array[0]);
        $this -> setItemDesignation($array[1]);
        $this -> setPharmacyDesignation($array[2]);
        $this -> setCount($array[3]);
    }

    public function saveSaletoPharmacy(ListPharmacy $listPharmacy){
        $pharmacy = $listPharmacy -> findPharmacy($this-> getPharmacyDesignation());
        echo $pharmacy-> getPharmacyDesignation();
        $pharmacy->addSale($this);
    }
}




$saleCorrected1 = new SaleCorrected ($sale1->createSaleCorrected($li, $lp));
$saleCorrected2 = new SaleCorrected ($sale2->createSaleCorrected($li, $lp));
$saleCorrected3 = new SaleCorrected ($sale3->createSaleCorrected($li, $lp));
$saleCorrected4 = new SaleCorrected ($sale4->createSaleCorrected($li, $lp));
$saleCorrected5 = new SaleCorrected ($sale5->createSaleCorrected($li, $lp));

class Pharmacy extends PharmacyDesignation
{
    private $sales = Array();

    //добавление продажи: если есть дистрибьютор в списке - увеличить значение, иначе - завеси новый элемент массива
    public function addSale(SaleCorrected $saleCorrected){
        $key = ($saleCorrected->getDistributor() ->getName());

        $value = $saleCorrected -> getCount() -> getCount();

        if (array_key_exists($key, $this->sales)) {
            $this -> sales[$key] += ($value);
        }
        else
        {$this->sales += [$key => $value];}
    }

    //вывод продаж по дистрибьюторам
    public function showSalesByDistributors(){
        print_r($this->sales);
    }


    // вывод общего числа проданного
    public function showSales (){
        $sum = 0;

        foreach (array_values($this->sales) as $element)
            $sum +=$element;
        return $sum;
    }
}

$pharm1 = new Pharmacy ;
$pharm1 -> setPharmacyDesignation($p1->getPharmacyDesignation());

$pharm2 = new Pharmacy ;
$pharm2 -> setPharmacyDesignation($p2->getPharmacyDesignation());

class ListPharmacy
{
    private $pharmacies = Array();

    //добавление новой аптеки, с проверкой наличия у добавляемой обозначения,
    // и последующей проверкой наличия аптеки в списке
    public function addPharmacy (Pharmacy $pharmacy){
        try {
            if ($key = $pharmacy -> getPharmacyDesignation()){
                $check = $this -> checkPharmacyInList($pharmacy-> getPharmacyDesignation());

                if(!$check) {
                    $key = $pharmacy->getPharmacyDesignation();
                    $value = $pharmacy;

                    $this->pharmacies += [$key => $value];
                }
                else
                    { echo 'Данная аптека уже в списке';}

            }
            else {
                throw new Exception('Для добавления аптеки в список необходимо указать обозначение аптеки');
            }
        }
        catch (Exception $ex){
            echo $ex ->getMessage();
        }
    }


    //проверка наличия аптеки в списке аптек
    public function checkPharmacyInList ($pharmacy){
        echo array_key_exists($pharmacy, $this->pharmacies);
        return array_key_exists($pharmacy, $this->pharmacies);
    }


    //Отображение всего списка аптек (по обозначениям)
    public function showPharmacies(){
        print_r(array_keys($this->pharmacies));
    }


    //выбор аптеки из списка на основе ее обозначения
    public function findPharmacy ($pharmacyDesignation){
            return $this->pharmacies [$pharmacyDesignation];
    }
}

$lpu = new ListPharmacy;

$lpu ->addPharmacy($pharm1);
$lpu ->addPharmacy($pharm2);
$lpu->showPharmacies();



echo $saleCorrected1->getPharmacyDesignation()->getPharmacyDesignation();
$pharm1->addSale($saleCorrected1);

echo $saleCorrected2->getPharmacyDesignation()->getPharmacyDesignation();
$pharm1->addSale($saleCorrected2);

echo $saleCorrected3->getPharmacyDesignation()->getPharmacyDesignation();
$pharm2->addSale($saleCorrected3);

echo $saleCorrected4->getPharmacyDesignation()->getPharmacyDesignation();
$pharm1->addSale($saleCorrected4);

echo $saleCorrected5->getPharmacyDesignation()->getPharmacyDesignation();
$pharm2->addSale($saleCorrected5);

echo $pharm1 ->showSales();
echo $pharm1 ->showSalesByDistributors();

echo $pharm2 ->showSales();
echo $pharm2 ->showSalesByDistributors();
